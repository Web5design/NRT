!function(){var e=Handlebars.template,t=Handlebars.templates=Handlebars.templates||{};t["section.hbs"]=e(function(e,t,a,n,i){function r(e,t,n){var i,r,s="";return s+="\n  ",r={hash:{narrative:e},data:t},s+=p((i=a.addSubViewTo||e.addSubViewTo,i?i.call(e,n.thisView,"NarrativeView",r):l.call(e,"addSubViewTo",n.thisView,"NarrativeView",r)))+"\n"}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,e.helpers),i=i||{};var s,o="",l=a.helperMissing,p=this.escapeExpression,c=this;return o+="<h1>Section</h1>\n",s=a.each.call(t,t.narratives,{hash:{},inverse:c.noop,fn:c.programWithDepth(1,r,i,t),data:i}),(s||0===s)&&(o+=s),o+='\n<a class="btn add-narrative">\n	Add Narrative\n</a>\n'}),t["report.hbs"]=e(function(e,t,a,n,i){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,e.helpers),i=i||{};var r,s="",o="function",l=this.escapeExpression;return s+='<div class="report-title">\n  <div class="time-period">January - March 2013</div>\n  <h1>'+l((r=t.report,r=null==r||r===!1?r:r.title,typeof r===o?r.apply(t):r))+'</h1>\n  <div class="report-extra">\n    <div class="last-update"><a href="#" data-toggle="tooltip" title="Last update"><i class="icon-time append"></i></a>1st of April, 18:23</div>\n    <div class="who"><a href="#" data-toggle="tooltip" title="Report owner"><i class="icon-user append"></i></a>Dr. Anybody</div>\n  </div>\n</div>\n<section>\n  <div class="section-title">\n    <h2>Overview</h2>\n  </div>\n  <p>'+l((r=t.report,r=null==r||r===!1?r:r.overview,typeof r===o?r.apply(t):r))+"</p>\n</section>\n"}),t["narrative.hbs"]=e(function(e,t,a,n,i){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,e.helpers),i=i||{};var r,s="",o="function",l=this.escapeExpression;return s+="<p class='content-text'>",(r=a.content)?r=r.call(t,{hash:{},data:i}):(r=t.content,r=typeof r===o?r.apply(t):r),s+=l(r)+"</p>\n"}),t["narrative-edit.hbs"]=e(function(e,t,a,n,i){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,e.helpers),i=i||{};var r,s="",o="function",l=this.escapeExpression;return s+="<textarea class='content-text-field'>",(r=a.content)?r=r.call(t,{hash:{},data:i}):(r=t.content,r=typeof r===o?r.apply(t):r),s+=l(r)+"</textarea>\n<a class='btn btn-primary save-narrative'>Save changes</a>\n"})}();

;
// Generated by CoffeeScript 1.6.3
(function() {
  var _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (_base = window.Backbone).Models || (_base.Models = {});

  window.Backbone.Models.Report = (function(_super) {
    __extends(Report, _super);

    function Report() {
      _ref = Report.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Report;

  })(Backbone.Model);

  (_base1 = window.Backbone).Models || (_base1.Models = {});

  window.Backbone.Models.Narrative = (function(_super) {
    __extends(Narrative, _super);

    function Narrative() {
      _ref1 = Narrative.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Narrative.prototype.defaults = {
      content: "Narrative goes here.",
      title: "title",
      editing: true
    };

    Narrative.prototype.url = "/api/narrative";

    return Narrative;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base2 = window.Backbone).Collections || (_base2.Collections = {});

  Backbone.Collections.NarrativeCollection = (function(_super) {
    __extends(NarrativeCollection, _super);

    function NarrativeCollection() {
      _ref2 = NarrativeCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    NarrativeCollection.prototype.model = Backbone.Models.Narrative;

    NarrativeCollection.prototype.url = "/api/narrative";

    return NarrativeCollection;

  })(Backbone.Collection);

  window.Backbone || (window.Backbone = {});

  (_base3 = window.Backbone).Views || (_base3.Views = {});

  Backbone.Views.SectionView = (function(_super) {
    __extends(SectionView, _super);

    function SectionView() {
      this.addNarrative = __bind(this.addNarrative, this);
      this.render = __bind(this.render, this);
      _ref3 = SectionView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    SectionView.prototype.template = Handlebars.templates['section.hbs'];

    SectionView.prototype.events = {
      "click .add-narrative": "addNarrative"
    };

    SectionView.prototype.initialize = function(options) {
      this.narratives = options.narratives;
      this.narratives.bind('add', this.render);
      this.narratives.bind('sync', this.render);
      return this.render();
    };

    SectionView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        thisView: this,
        narratives: this.narratives.models
      }));
      this.renderSubViews();
      return this;
    };

    SectionView.prototype.addNarrative = function() {
      var newNarrative;
      newNarrative = new Backbone.Models.Narrative();
      return this.narratives.push(newNarrative);
    };

    SectionView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return SectionView;

  })(Backbone.Diorama.NestingView);

  window.Backbone || (window.Backbone = {});

  (_base4 = window.Backbone).Views || (_base4.Views = {});

  Backbone.Views.ReportView = (function(_super) {
    __extends(ReportView, _super);

    function ReportView() {
      this.render = __bind(this.render, this);
      _ref4 = ReportView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ReportView.prototype.template = Handlebars.templates['report.hbs'];

    ReportView.prototype.initialize = function(options) {
      this.report = options.report;
      return this.render();
    };

    ReportView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        thisView: this,
        report: this.report.toJSON()
      }));
      this.renderSubViews();
      return this;
    };

    ReportView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return ReportView;

  })(Backbone.Diorama.NestingView);

  window.Backbone || (window.Backbone = {});

  (_base5 = window.Backbone).Views || (_base5.Views = {});

  Backbone.Views.NarrativeView = (function(_super) {
    __extends(NarrativeView, _super);

    function NarrativeView() {
      this.startEdit = __bind(this.startEdit, this);
      this.saveNarrative = __bind(this.saveNarrative, this);
      this.render = __bind(this.render, this);
      _ref5 = NarrativeView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    NarrativeView.prototype.template = Handlebars.templates['narrative.hbs'];

    NarrativeView.prototype.editTemplate = Handlebars.templates['narrative-edit.hbs'];

    NarrativeView.prototype.events = {
      "click .save-narrative": "saveNarrative",
      "click .content-text": "startEdit"
    };

    NarrativeView.prototype.initialize = function(options) {
      this.narrative = options.narrative;
      this.narrative.bind('change', this.render);
      return this.render();
    };

    NarrativeView.prototype.render = function() {
      if (this.narrative.get('editing')) {
        this.$el.html(this.editTemplate(this.narrative.toJSON()));
      } else {
        this.$el.html(this.template(this.narrative.toJSON()));
      }
      return this;
    };

    NarrativeView.prototype.saveNarrative = function(event) {
      this.narrative.set('title', "title");
      this.narrative.set('content', this.$el.find('.content-text-field').val().replace(/^\s+|\s+$/g, ''));
      this.narrative.set('editing', false);
      return this.narrative.save();
    };

    NarrativeView.prototype.startEdit = function() {
      this.narrative.set('editing', true);
      return this.render();
    };

    NarrativeView.prototype.onClose = function() {};

    return NarrativeView;

  })(Backbone.View);

  window.Backbone || (window.Backbone = {});

  (_base6 = window.Backbone).Controllers || (_base6.Controllers = {});

  Backbone.Controllers.ReportsController = (function(_super) {
    __extends(ReportsController, _super);

    function ReportsController() {
      var narratives, report, reportView, sectionView;
      report = new Backbone.Models.Report({
        title: "Test Report",
        overview: "This is for testing"
      });
      reportView = new Backbone.Views.ReportView({
        report: report
      });
      $('.report-content').prepend(reportView.el);
      this.tmpSectionRegion = new Backbone.Diorama.ManagedRegion();
      $('#user-section').prepend(this.tmpSectionRegion.$el);
      narratives = new Backbone.Collections.NarrativeCollection();
      narratives.fetch();
      sectionView = new Backbone.Views.SectionView({
        narratives: narratives
      });
      this.tmpSectionRegion.showView(sectionView);
    }

    return ReportsController;

  })(Backbone.Diorama.Controller);

  Handlebars.registerHelper("debug ", function(optionalValue) {
    console.log("Current Context");
    console.log("====================");
    console.log(this);
    if (optionalValue) {
      console.log("Value");
      console.log("====================");
      return console.log(optionalValue);
    }
  });

}).call(this);
